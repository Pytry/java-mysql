package org.xitikit.examples.java.mysql.logwatch.simple;

import java.util.Objects;

//@formatter:off
/**
 * Represents a single row in the blocked_ipv4 table.
 * SQL Example:
 * <p>
 * CREATE TABLE IF NOT EXISTS blocked_ipv4 (
 *   id     INT AUTO_INCREMENT PRIMARY KEY,
 *   ipv4   VARCHAR(15)  NOT NULL,
 *   reason VARCHAR(512) NOT NULL
 * )
 */
//@formatter:on
public class BlockedIpv4{

    /**
     * The id as generated and incremented by the database.
     * This value has no relation to any field in the actual
     * entry in the log files; it is simply here to provide
     * identity.
     */
    private Integer id;

    /**
     * The ip address, in IPv4 format, contained in the second column of the logs entry.
     */
    private String ipv4;

    /**
     * The text which indicates the reason for blocking the IP
     */
    private String reason;

    /**
     * Default
     */
    public BlockedIpv4(){

    }

    /**
     * An almost-all-arg constructor with WYSIWYG behaviour.
     * Since the id should be generated by the database, it is omitted here.
     */
    public BlockedIpv4(final String ipv4, final String reason){

        this.ipv4 = ipv4;
        this.reason = reason;
    }

    @Override
    public int hashCode(){

        return Objects.hash(getId(), getIpv4(), getReason());
    }

    public Integer getId(){

        return id;
    }

    public void setId(final Integer id){

        this.id = id;
    }

    public String getIpv4(){

        return ipv4;
    }

    public void setIpv4(final String ipv4){

        this.ipv4 = ipv4;
    }

    public String getReason(){

        return reason;
    }

    public void setReason(final String reason){

        this.reason = reason;
    }

    @Override
    public boolean equals(final Object o){

        if(this == o){
            return true;
        }
        if(!(o instanceof BlockedIpv4)){
            return false;
        }
        BlockedIpv4 that = (BlockedIpv4) o;
        return Objects.equals(getId(), that.getId()) &&
            Objects.equals(getIpv4(), that.getIpv4()) &&
            Objects.equals(getReason(), that.getReason());
    }

    @Override
    public String toString(){

        return "BlockedIpv4{" +
            "id=" + id +
            ", ipv4='" + ipv4 + '\'' +
            ", reason='" + reason + '\'' +
            '}';
    }
}
